Exercise 1: System call IDT entry

1. Set a breakpoint at mpmain and continue until breakpoint is hit
2. Step over until after after idtinit has completed (line 56)
3. Go to QEMU and get the value of IDT register with info registers
4. Inspect value in memory

IDT=     80114ca0 000007ff

This means the IDT starts at address 0x80114ca0 and has size of 0x7FF or 2047 bytes. Each entry in the IDT is 1 greatword, or 64 bits, or 8 bytes. Thus there are 255 entries.

The syscall gate is vector #64 as seen in traps.h.

#define T_SYSCALL       64      // system call

Inspect the next 64 8-byte values starting at address 0x80114ca0 with x/64gx 0x80114ca0.

(gdb) x /64gx 0x80114ca0
0x80114ca0 <idt>:       0x80108e0000085864      0x80108e000008586d
0x80114cb0 <idt+16>:    0x80108e0000085876      0x80108e000008587f
0x80114cc0 <idt+32>:    0x80108e0000085888      0x80108e0000085891
0x80114cd0 <idt+48>:    0x80108e000008589a      0x80108e00000858a3
0x80114ce0 <idt+64>:    0x80108e00000858ac      0x80108e00000858b3
0x80114cf0 <idt+80>:    0x80108e00000858bc      0x80108e00000858c3
0x80114d00 <idt+96>:    0x80108e00000858ca      0x80108e00000858d1
0x80114d10 <idt+112>:   0x80108e00000858d8      0x80108e00000858df
0x80114d20 <idt+128>:   0x80108e00000858e8      0x80108e00000858f1
0x80114d30 <idt+144>:   0x80108e00000858f8      0x80108e0000085901
0x80114d40 <idt+160>:   0x80108e000008590a      0x80108e0000085913
0x80114d50 <idt+176>:   0x80108e000008591c      0x80108e0000085925
0x80114d60 <idt+192>:   0x80108e000008592e      0x80108e0000085937
0x80114d70 <idt+208>:   0x80108e0000085940      0x80108e0000085949
0x80114d80 <idt+224>:   0x80108e0000085952      0x80108e000008595b
0x80114d90 <idt+240>:   0x80108e0000085964      0x80108e000008596d
0x80114da0 <idt+256>:   0x80108e0000085976      0x80108e000008597f
0x80114db0 <idt+272>:   0x80108e0000085988      0x80108e0000085991
0x80114dc0 <idt+288>:   0x80108e000008599a      0x80108e00000859a3
0x80114dd0 <idt+304>:   0x80108e00000859ac      0x80108e00000859b5
0x80114de0 <idt+320>:   0x80108e00000859be      0x80108e00000859c7
0x80114df0 <idt+336>:   0x80108e00000859d0      0x80108e00000859d9
0x80114e00 <idt+352>:   0x80108e00000859e2      0x80108e00000859eb
0x80114e10 <idt+368>:   0x80108e00000859f4      0x80108e00000859fd
0x80114e20 <idt+384>:   0x80108e0000085a06      0x80108e0000085a0f
0x80114e30 <idt+400>:   0x80108e0000085a18      0x80108e0000085a21
0x80114e40 <idt+416>:   0x80108e0000085a2a      0x80108e0000085a33
0x80114e50 <idt+432>:   0x80108e0000085a3c      0x80108e0000085a45
0x80114e60 <idt+448>:   0x80108e0000085a4e      0x80108e0000085a57
0x80114e70 <idt+464>:   0x80108e0000085a60      0x80108e0000085a69
0x80114e80 <idt+480>:   0x80108e0000085a72      0x80108e0000085a7b
0x80114e90 <idt+496>:   0x80108e0000085a84      0x80108e0000085a8d

1000000000010000 1 00 01110 000 00000 0000000000001000 0101101010001101

Offset: 0x8010
Segment present: 1
DPL: 00
    00 refers to highest descriptor privilege level
D: 1
    32 bit gate size
Segment selector: 0x0008
Offset: 0x5a8d

The only difference between this gate and the others is the last 3 hex digits. Looking it up in the manual, this is the GDT/LDT offset.

Exercise 2

1. Set a breakpoint at syscall (b syscall) and continue until breakpoint is hit
2. Step over until after num is assigned (line 138).
3. Examine the contents of num

(gdb) p num
$1 = 7

Thus we know the syscall is the 7th in the table in syscall.c, or sys_exec.

(gdb) p curproc
$2 = (struct proc *) 0x80112d54 <ptable+52>
(gdb) p *curproc
$3 = {sz = 4096, pgdir = 0x8dffe000, kstack = 0x8dfff000 "", state = RUNNING,
pid = 1, parent = 0x0, tf = 0x8dffffb4, context = 0x8dfffea0, chan = 0x0,
killed = 0, ofile = {0x0 <repeats 16 times>}, cwd = 0x80110a14 <icache+52>,
name = "initcode\000\000\000\000\000\000\000"}
(gdb) info reg
eax            0x7      7
ecx            0x1      1
edx            0x0      0
ebx            0x80112d54       -2146357932
esp            0x8dffff40       0x8dffff40
ebp            0x8dffff58       0x8dffff58
esi            0x8dffffb4       -1912602700
edi            0x0      0
eip            0x80104685       0x80104685 <syscall+21>
eflags         0x282    [ SF IF ]
cs             0x8      8
kstack = 0x8dfff000 refers to the absolute minimum address of the stack. KSTACKSIZE is defined to be 4096, in param.h.

Thus the “bottom” of the stack (highest memory address) is kstack + KSTACKSIZE = 0x8e000000. The allocated portion is everything “below” (higher memory address) %esp.

We will examine the memory in word size with x /4wx $esp.

(gdb) x /4wx $esp
0x8dffff40:     0x8dffffb4      <- trapret
                0x00000000
                0x8dffff58
                0x801036cc
0x8dffff50:     0x8dffffb4      <- trapret
                0x00000000    
                0x8dffffa8    
                0x80105699    
0x8dffff60:     0x8010151c    
                0x80106d78
                0x000003e8
                0x000003ad
0x8dffff70:     0x000000c8
                0x0000001e
                0x00000002
                0x00000020
0x8dffff80:     0x0000003a
                0x00000000
                0x00000000
                0x8dffffac
0x8dffff90:     0x801035e2
                0x00000001
                0x01010101
                0x00000000      <- edi also curproc->context
0x8dffffa0:     0x00000000      <- esi
                0x00000000      <- ebx
                0x00000000      <- ebp
                0x801053e2      <- forkret
0x8dffffb0:     0x8dffffb4      <- trapret
                0x00000000      <- edi also curproc->tf
                0x00000000      <- esi
                0x00000000      <- ebp
0x8dffffc0:     0x8dffffd4      <- oesp
                0x00000000      <- ebx
                0x00000000      <- edx
                0x00000000      <- ecx
0x8dffffd0:     0x00000007      <- eax
                0x00000000      <- gs
                0x00000000      <- fs
                0x00000023      <- es
0x8dffffe0:     0x00000023      <- ds
                0x00000040      <- trapno
                0x00000000      <- err
                0x00000013      <- eip
0x8dfffff0:     0x0000001b      <- cs
                0x00000202      <- eflags
                0x00000ff4      <- esp
                0x00000023      <- ss

Exercise 3

Set a breakpoint at swtch and continue until breakpoint is hit.

The stack pointer is %esp. Inspect the top 3 words on the stack with x /3wx $esp.

(gdb) x /3wx $esp
0x8010b54c:     0x801039e0      <- eip
                0x80112784      <- cs
                0x8dffff9c      <- eflags

Step past and over movl %edx, %esp. Inspect the top 6 words on the stack with x /6wx $esp.

0x8dffff9c:     0x00000000      <- eip
                0x00000000      <- cs
                0x00000000      <- eflags
                0x00000000      <- esp
0x8dffffac:     0x801035a0      <- ss
                0x801053e5      

Exercise 4

Place a breakpoint at syscall and continue until breakpoint is hit.
Step over until after syscall handler is called (past line 139).


